{
  "functions": {
    "initial": "paper.project.layers[0].removeChildren();\nv.count = 0;\nv.venues   = {};\nv.searches = {};\nv.scans    = {};\nv.cluster  = [];\n\nv.geopos = [ 51.544303, -0.051344 ];\n//geopos = [ 51.538043, -0.061344 ];\n\nv.ll2p = function(lat, lng) {\n  return v.map.layerPointToContainerPoint( v.map.latLngToLayerPoint( new L.LatLng(lat, lng) ) );\n};\n\nv.calcScore = function(venue) {\n  return venue.stats.usersCount/100 * venue.stats.checkinsCount/20;\n};\n\nv.map = new L.Map('map');\n\nvar cloudmadeUrl = 'http://{s}.tile.cloudmade.com/BC9A493B41014CAABB98F0471D759707/62930/256/{z}/{x}/{y}.png',\n\t\tcloudmadeAttribution = 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2011 CloudMade',\n\t\tcloudmade = new L.TileLayer(cloudmadeUrl, {minZoom: 10, maxZoom: 19, attribution: cloudmadeAttribution});\n\nv.map.setView(new L.LatLng(v.geopos[0], v.geopos[1]), 15).addLayer(cloudmade);\nv.map.boxZoom.disable();\n\nv.map.off('click').on('click', function(e) {\n  if (e.originalEvent.shiftKey) {\n    fetchVenues(e.latlng);\n  } else {\n    cluster(e.latlng)\n  }\n});\n\n",
    "paperjs": "paper.project.layers[0].removeChildren();\n\n_.each(v.searches, function(search) {\n  var dot = new Path.Circle( v.ll2p( search.ll.lat, search.ll.lng ), search.radius/4.5);\n  dot.opacity = 0.5;\n  dot.fillColor = '#fff';\n});\n\nif (v.cluster.length > 0) {\n  var path = new Path(); \n  path.segments = []; \n\n  for (var i=0; i < v.cluster.length; i++){\n    path.add( v.ll2p( v.cluster[i].ll.lat, v.cluster[i].ll.lng ) );\n  }\n  path.smooth();\n  path.strokeColor = '#fff'; \n  path.strokeWidth = 35; \n  path.strokeCap = 'round';\n}\n\n_.each(v.scans, function(scan){\n  var rec = new Path.Rectangle( \n    v.ll2p(scan.ll1.lat, scan.ll1.lng ), v.ll2p(scan.ll2.lat, scan.ll2.lng) \n  );\n  rec.opacity = 0.5;\n  rec.fillColor = '#fff';\n});\n\n_.each(v.venues, function(venue) {  \n  var size = v.calcScore(venue);\n  \n  if (size < highpass || venue.hide) return;\n  \n  var pos = v.map.layerPointToContainerPoint( \n    v.map.latLngToLayerPoint( new L.LatLng( venue.location.lat, venue.location.lng ) )\n  );\n  var p = new Point([pos.x, pos.y]);\n  \n  if (size > labels) {\n    var text = new PointText(p.add([8, 0]));\n    text.justification = 'left';\n    text.fontSize = '10px';\n    text.fillColor = '#0ff';\n    text.content = venue.name + (venue.categories[0] ? ' - '+ venue.categories[0]['name'] : '');\n  }\n  \n  var dot = new Path.Circle(p,  Math.pow(size, power));\n  \n  if (v.cluster.length && (v.cluster[0].id == venue.id)) {\n    dot.fillColor = '#fff';\n  } else {\n    dot.fillColor = '#ff0';\n  }\n  //dot.fillColor.brightness = size /1;\n  dot.opacity = size / 7;\n  //text.content = venue.name;\n});\n",
    "instant": "var search_radius = 250; // metres\nvar total_calls = 24;\nvar dirs = [ [1, 0], [0, 1], [-1,  0], [0, -1] ]; // r d l u\nvar url = 'https://api.foursquare.com/v2/venues/search?oauth_token=' + \n          'ZUX1IEBBXVCDZ305PSTJULXRG3PFIK4W2LN2W01BRI4WI2BR&v=20120514'+\n          '&intent=browse' + '&limit=50';\n          \nwindow.fetchVenues = function(ll1, ll2, callback) {\n  var key = '' + ll1.lat + ll1.lng, \n      url2 = '';\n\n  if (ll2) {\n    key += ll2.lat + ll2.lng;\n    if (v.scans[key]) return; // stop dupe searches\n    url2 = '&sw=' + ll1.lat +',' + ll1.lng + '&ne=' + ll2.lat +',' + ll2.lng; ;\n  } else {\n    if (v.searches[key]) return; // stop dupe searches\n    url2 = '&radius=' + search_radius + '&ll=' + ll1.lat +',' + ll1.lng;\n  }\n  console.log('searching:' + key);\n  \n  $.getJSON(url + url2, function(res){\n    console.log('found ' + res.response.venues.length);\n    window.results = res; // test\n    _(res.response.venues).each(function(venue){\n      if (venue.categories.length) {\n        if (venue.categories[0].name == 'Train Station' ||\n            venue.categories[0].name == 'Subway' ||\n            venue.categories[0].name == 'Light Rail' || \n            venue.categories[0].name == 'Highway or Road') {\n          venue.hide = true;\n        }\n      }\n      if (! v.venues[venue.id]) { // dont reinsert venue\n        venue.ll = new L.LatLng( venue.location.lat, venue.location.lng );\n        v.venues[venue.id] = venue;\n      }\n    });\n    \n    delete v.searches[key];\n    delete v.scans[key];\n    console.log('total venues = ' + _( v.venues ).keys().length);\n    \n    //var key = (_(v.venues).keys())[int(Math.random()*_(v.venues).keys().length)];\n    //var next = v.venues[ key ]; // TODO find highest ranking? furtherest? unsearched\n      \n    //if (! next.searched) next.searched = true;\n  });\n};\n\nwindow.cluster = function (ll) {\n  console.log('cluster');\n  \n  var closest; // id + distance\n\n  function findClosest(here, all) {\n    var best = null;\n    _.each(all, function(venue) {\n      var score = v.calcScore( venue );\n      if (! best) {\n        best = { id: venue.id, distance: venue.ll.distanceTo( ll ) };\n        return;\n      }\n      if (venue.hide) return;\n      \n      var distance = venue.ll.distanceTo( here );\n      if (distance < best.distance && score > highpass) {\n        best = { id: venue.id, distance: distance };\n      }\n    });\n    return best;\n  }\n  \n  function findCluster(venue, possibles) {\n    delete possibles[venue.id]; // don't tell me here is nearest to here\n\n    var closest = findClosest( venue.ll, possibles ); // \n    if (closest.distance < 200) {\n      v.cluster.push( v.venues[closest.id] )\n      console.log( v.venues[closest.id].name );\n      //delete possibles[closest.id];\n      findCluster(v.venues[closest.id], possibles);\n    }\n  }\n  \n  // find closest venue to tap\n  var closest = findClosest( ll, v.venues );\n  \n  //console.log( closest.distance )\n  if (closest.distance > 100) { // TODO include zoom level\n    v.cluster = [];\n    return;\n  }\n  \n  // then do the clustering !\n  console.log( v.venues[closest.id].name );\n  v.cluster = [ v.venues[closest.id] ];\n  \n  var venues = _.clone(v.venues);\n  \n  findCluster(v.cluster[0], venues);\n}\n\n\nwindow.popup = function(latlng, content){\n  var popup = new L.Popup();\n\n  popup.setLatLng(latlng);\n  popup.setContent(content);\n\n  v.map.openPopup(popup);\n}\n\n",
    "unpause": "\n//v.scans['a'] = { ll1: v.map.getBounds().getNorthWest(), ll2: v.map.getBounds().getSouthEast() }\n\nvar bounds = v.map.getBounds();\n\nvar max_connections = 3;\n\n// save full screen bounds for post-scrolling action later\n\nfetchVenues( bounds.getSouthWest(), bounds.getNorthEast() );\n\nfunction quarters(bounds) {\n  var sw = bounds.getSouthWest(), nw = bounds.getNorthWest(),\n      se = bounds.getSouthEast(), ne = bounds.getNorthEast(),\n      width = nw.lng - ne.lng,  height = nw.lat - sw.lat;\n\n  // 0 1\n  // 2 3\n  return [ // LLB sw, ne\n    new L.LatLngBounds( new L.LatLng(nw.lat, -74.227), new L.LatLng(40.712,-74.227) ),\n    new L.LatLngBounds( new L.LatLng(40.712, -74.227), new L.LatLng(40.712,-74.227) ),\n    new L.LatLngBounds( new L.LatLng(40.712, -74.227), new L.LatLng(40.712,-74.227) ),\n    new L.LatLngBounds( new L.LatLng(40.712, -74.227), new L.LatLng(40.712,-74.227) )\n  ]\n}",
    "canvas": "  "
  },
  "parameters": {
    "noapi": {
      "initial": 0.5,
      "raw": 0.5,
      "formula": "true",
      "weight": null,
      "manual": 0.98,
      "id": "noapi"
    },
    "labels": {
      "initial": 0.5,
      "raw": 0.5,
      "formula": "coax(slider, 10460, -100)",
      "weight": null,
      "manual": 0.24,
      "id": "labels"
    },
    "power": {
      "initial": 0.5,
      "raw": 0.5,
      "formula": "coax(slider, 0, 1)",
      "weight": null,
      "manual": 0.28,
      "id": "power"
    },
    "highpass": {
      "initial": 0.5,
      "raw": 0.5,
      "formula": "coax(slider, -1, 40)",
      "weight": null,
      "manual": 0.03,
      "id": "highpass"
    }
  },
  "iteration": 10
}